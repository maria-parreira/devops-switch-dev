pipeline {

    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials'
        DOCKER_IMAGE = 'mariaparreira/webapp'
        DOCKER_TAG = "${env.BUILD_ID}"
    }

    stages {
        stage('Checkout') {
             steps {
                 echo 'Checking out code from the repository'
                 git branch: 'main', url: 'https://github.com/maria-parreira/devops-switch-dev.git'
               }
        }

        stage('Set Permissions') {
            steps {
                dir('CA2/Part2/demoWithGradle') {
                    echo 'Setting executable permissions on gradlew...'
                    sh 'chmod +x gradlew'
                }
            }
        }

        stage('Build') {
            steps {
                retry(3) {
                    dir('CA2/Part2/demoWithGradle') {
                        echo 'Build the application...'
                        sh './gradlew build'
                    }
                }
            }
        }

        stage('Test') {
            steps {
                dir('CA2/Part2/demoWithGradle') {
                    echo 'Running tests...'
                    sh './gradlew test'
                }
            }
        }

        stage('Javadoc') {
            steps {
                dir('CA2/Part2/demoWithGradle') {
                    echo 'Generating Javadoc...'
                    sh './gradlew javadoc'
                    publishHTML(target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'build/docs/javadoc',
                        reportFiles: 'index.html',
                        reportName: 'Javadoc'
                    ])
                }
            }
        }

        stage('Archive') {
            steps {
                dir('CA2/Part2/demoWithGradle') {
                    echo 'Archiving artifacts...'
                    archiveArtifacts artifacts: 'build/libs/*.jar', fingerprint: true
                }
            }
        }

        stage('Create Docker image') {
            steps {
                dir('CA2/Part2/demoWithGradle') {
                    echo 'Creating docker image...'
                    script {
                        def dockerfileContent = """
                        FROM gradle:jdk21
                        WORKDIR /app
                        COPY build/libs/demo-0.0.1-SNAPSHOT.jar app.jar
                        EXPOSE 8080
                        ENTRYPOINT ["java", "-jar", "app.jar"]
                        """
                        writeFile file: 'Dockerfile', text: dockerfileContent
                    }
                }
            }
        }

         stage('Verify Docker Context') {
                    steps {
                        script {
                            echo 'Verifying Docker contexts...'
                            sh 'docker context ls'
                            sh 'docker context use default'
                        }
                    }
        }

         stage('Publish Image') {
                    steps {
                    echo 'Publishing docker image...'
                        script {
                            docker.withRegistry('https://hub.docker.com/', "${DOCKER_CREDENTIALS_ID}") {

                                dir('CA2/Part2/demoWithGradle') {
                                    def customImage = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                                    customImage.push()
                                    customImage.push('latest')
                                }
                            }
                        }
                    }
         }

        stage('Run Container') {
            steps {
                script {
                    echo 'Running Docker container...'
                    sh "docker run -d -p 8080:8080 ${DOCKER_IMAGE}:latest"
                }
            }
        }
    }

      post {
            always {
                cleanWs()
            }
            success {
                echo 'Pipeline successfully completed!'
            }
            failure {
                echo 'Pipeline failed!'
            }
      }

    }

